// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Gestión de proyectos
model Category {
  id           Int       @id @default(autoincrement())
  name         String
  slug         String    @unique
  description  String?
  displayOrder Int       @default(0) @map("display_order")
  projects     Project[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model Technology {
  id                  Int                   @id @default(autoincrement())
  name                String
  category            String
  iconUrl             String?               @map("icon_url")
  color               String?
  displayOrder        Int                   @default(0) @map("display_order")
  projectTechnologies ProjectTechnology[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")

  @@map("technologies")
}

model Project {
  id               Int                 @id @default(autoincrement())
  title            String
  description      String
  longDescription  String?             @map("long_description") @db.Text
  categoryId       Int                 @map("category_id")
  status           String              @default("draft")
  priority         Int                 @default(0)
  featured         Boolean             @default(false)
  slug             String              @unique
  category         Category            @relation(fields: [categoryId], references: [id])
  technologies     ProjectTechnology[]
  images           ProjectImage[]
  links            ProjectLink[]
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  @@map("projects")
}

model ProjectTechnology {
  projectId        Int         @map("project_id")
  technologyId     Int         @map("technology_id")
  proficiencyLevel String?     @map("proficiency_level")
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology       Technology  @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([projectId, technologyId])
  @@map("project_technologies")
}

model ProjectImage {
  id           Int     @id @default(autoincrement())
  projectId    Int     @map("project_id")
  imageUrl     String  @map("image_url")
  altText      String? @map("alt_text")
  displayOrder Int     @default(0) @map("display_order")
  isFeatured   Boolean @default(false) @map("is_featured")
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

model ProjectLink {
  id        Int     @id @default(autoincrement())
  projectId Int     @map("project_id")
  linkType  String  @map("link_type")
  url       String
  label     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_links")
}

// Sistema de blog
model BlogCategory {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  blogPosts   BlogPost[]
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("blog_categories")
}

model BlogPost {
  id              Int           @id @default(autoincrement())
  title           String
  content         String        @db.Text
  excerpt         String?
  slug            String        @unique
  categoryId      Int?          @map("category_id")
  status          String        @default("draft")
  seoTitle        String?       @map("seo_title")
  seoDescription  String?       @map("seo_description")
  featuredImage   String?       @map("featured_image")
  publishedAt     DateTime?     @map("published_at")
  blogCategory    BlogCategory? @relation(fields: [categoryId], references: [id])
  tags            BlogPostTag[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("blog_posts")
}

model BlogTag {
  id        Int           @id @default(autoincrement())
  name      String
  slug      String        @unique
  blogPosts BlogPostTag[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("blog_tags")
}

model BlogPostTag {
  postId Int      @map("post_id")
  tagId  Int      @map("tag_id")
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("blog_post_tags")
}

// Contacto y analíticas
model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  status    String   @default("new")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contacts")
}

model SiteAnalytics {
  id        Int      @id @default(autoincrement())
  pagePath  String   @map("page_path")
  visitorId String?  @map("visitor_id")
  sessionId String?  @map("session_id")
  timestamp DateTime @default(now())
  userAgent String?  @map("user_agent")
  referrer  String?

  @@map("site_analytics")
} 